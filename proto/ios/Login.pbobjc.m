// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Login.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LoginRoot

@implementation LoginRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - LoginRoot_FileDescriptor

static GPBFileDescriptor *LoginRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"login"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ApplyLogin

@implementation ApplyLogin

@dynamic account;
@dynamic password;
@dynamic type;

typedef struct ApplyLogin__storage_ {
  uint32_t _has_storage_[1];
  ApplyLogin_LoginType type;
  NSString *account;
  NSString *password;
} ApplyLogin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = ApplyLogin_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ApplyLogin__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = ApplyLogin_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ApplyLogin__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ApplyLogin_LoginType_EnumDescriptor,
        .number = ApplyLogin_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ApplyLogin__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ApplyLogin class]
                                     rootClass:[LoginRoot class]
                                          file:LoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ApplyLogin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ApplyLogin_Type_RawValue(ApplyLogin *message) {
  GPBDescriptor *descriptor = [ApplyLogin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ApplyLogin_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetApplyLogin_Type_RawValue(ApplyLogin *message, int32_t value) {
  GPBDescriptor *descriptor = [ApplyLogin descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ApplyLogin_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ApplyLogin_LoginType

GPBEnumDescriptor *ApplyLogin_LoginType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Mobile\000Home\000Work\000";
    static const int32_t values[] = {
        ApplyLogin_LoginType_Mobile,
        ApplyLogin_LoginType_Home,
        ApplyLogin_LoginType_Work,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ApplyLogin_LoginType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ApplyLogin_LoginType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ApplyLogin_LoginType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ApplyLogin_LoginType_Mobile:
    case ApplyLogin_LoginType_Home:
    case ApplyLogin_LoginType_Work:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ReplyLogin

@implementation ReplyLogin

@dynamic errinfo;
@dynamic code;

typedef struct ReplyLogin__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *errinfo;
} ReplyLogin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errinfo",
        .dataTypeSpecific.className = NULL,
        .number = ReplyLogin_FieldNumber_Errinfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplyLogin__storage_, errinfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = ReplyLogin_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplyLogin__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplyLogin class]
                                     rootClass:[LoginRoot class]
                                          file:LoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplyLogin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
