// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinfo.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Userinfo.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - UserinfoRoot

@implementation UserinfoRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - UserinfoRoot_FileDescriptor

static GPBFileDescriptor *UserinfoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"login"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - userInfo

@implementation userInfo

@dynamic playerId;
@dynamic playerName;
@dynamic sex;
@dynamic playerIcon;
@dynamic titleId;
@dynamic titleName;
@dynamic age;
@dynamic auth;
@dynamic sign;

typedef struct userInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  int32_t titleId;
  int32_t age;
  int32_t auth;
  NSString *playerName;
  NSString *playerIcon;
  NSString *titleName;
  NSString *sign;
  int64_t playerId;
} userInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playerId",
        .dataTypeSpecific.className = NULL,
        .number = userInfo_FieldNumber_PlayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(userInfo__storage_, playerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "playerName",
        .dataTypeSpecific.className = NULL,
        .number = userInfo_FieldNumber_PlayerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(userInfo__storage_, playerName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = userInfo_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(userInfo__storage_, sex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "playerIcon",
        .dataTypeSpecific.className = NULL,
        .number = userInfo_FieldNumber_PlayerIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(userInfo__storage_, playerIcon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleId",
        .dataTypeSpecific.className = NULL,
        .number = userInfo_FieldNumber_TitleId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(userInfo__storage_, titleId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "titleName",
        .dataTypeSpecific.className = NULL,
        .number = userInfo_FieldNumber_TitleName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(userInfo__storage_, titleName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "age",
        .dataTypeSpecific.className = NULL,
        .number = userInfo_FieldNumber_Age,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(userInfo__storage_, age),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "auth",
        .dataTypeSpecific.className = NULL,
        .number = userInfo_FieldNumber_Auth,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(userInfo__storage_, auth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sign",
        .dataTypeSpecific.className = NULL,
        .number = userInfo_FieldNumber_Sign,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(userInfo__storage_, sign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[userInfo class]
                                     rootClass:[UserinfoRoot class]
                                          file:UserinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(userInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\007A\000\002\n\000\004\n\000\005\006A\000\006\t\000\010D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomUserInfo

@implementation RoomUserInfo

@dynamic hasUserInfo, userInfo;

typedef struct RoomUserInfo__storage_ {
  uint32_t _has_storage_[1];
  userInfo *userInfo;
} RoomUserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(userInfo),
        .number = RoomUserInfo_FieldNumber_UserInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RoomUserInfo__storage_, userInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomUserInfo class]
                                     rootClass:[UserinfoRoot class]
                                          file:UserinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RoomUserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OneUserinfo

@implementation OneUserinfo

@dynamic hasUserInfo, userInfo;

typedef struct OneUserinfo__storage_ {
  uint32_t _has_storage_[1];
  userInfo *userInfo;
} OneUserinfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(userInfo),
        .number = OneUserinfo_FieldNumber_UserInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OneUserinfo__storage_, userInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OneUserinfo class]
                                     rootClass:[UserinfoRoot class]
                                          file:UserinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OneUserinfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
